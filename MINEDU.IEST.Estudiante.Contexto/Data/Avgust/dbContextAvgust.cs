// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using IDCL.AVGUST.SIP.Contexto.IDCL.AVGUST.SIP.Contexto.Configurations;
using IDCL.AVGUST.SIP.Contexto.IDCL.AVGUST.SIP.Entity.Avgust;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
#nullable disable

namespace IDCL.AVGUST.SIP.Contexto.IDCL.AVGUST.SIP.Contexto
{
    public partial class dbContextAvgust : DbContext
    {
        public dbContextAvgust()
        {
        }

        public dbContextAvgust(DbContextOptions<dbContextAvgust> options)
            : base(options)
        {
        }

        public virtual DbSet<Aplicacion> Aplicacions { get; set; }
        public virtual DbSet<Articulo> Articulos { get; set; }
        public virtual DbSet<Caracteristica> Caracteristicas { get; set; }
        public virtual DbSet<CientificoPlaga> CientificoPlagas { get; set; }
        public virtual DbSet<Clase> Clases { get; set; }
        public virtual DbSet<Composicion> Composicions { get; set; }
        public virtual DbSet<Cultivo> Cultivos { get; set; }
        public virtual DbSet<Documento> Documentos { get; set; }
        public virtual DbSet<Formulador> Formuladors { get; set; }
        public virtual DbSet<GrupoQuimico> GrupoQuimicos { get; set; }
        public virtual DbSet<IdTipoProducto> IdTipoProductos { get; set; }
        public virtual DbSet<IngredienteActivo> IngredienteActivos { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumentos { get; set; }
        public virtual DbSet<TipoFormulacion> TipoFormulacions { get; set; }
        public virtual DbSet<TitularRegistro> TitularRegistros { get; set; }
        public virtual DbSet<Toxicologica> Toxicologicas { get; set; }
        public virtual DbSet<Uso> Usos { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<UsuarioPai> UsuarioPais { get; set; }

        public virtual DbSet<Fabricante> Fabricantes { get; set; }
        public virtual DbSet<ProductoFabricante> ProductoFabricantes { get; set; }
        public virtual DbSet<ProductoFormulador> ProductoFormuladors { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new Configurations.AplicacionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArticuloConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CaracteristicaConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CientificoPlagaConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClaseConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ComposicionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CultivoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.FormuladorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.GrupoQuimicoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IdTipoProductoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IngredienteActivoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PaiConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TipoDocumentoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TipoFormulacionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TitularRegistroConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ToxicologicaConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsuarioConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsuarioPaiConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.FabricanteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductoFabricanteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductoFormuladorConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
